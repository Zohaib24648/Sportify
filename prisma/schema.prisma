// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  admin
  moderator
  user
  ground_owner
}

enum DAY {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum MEDIA_TYPE {
  image
  video
  audio
}

enum GAME_TYPE {
  indoor
  outdoor
  both 
  }

enum REVIEW_STATUS {
  pending
  approved
  rejected
}

enum BOOKING_STATUS {
  pending
  confirmed
  cancelled
  on_hold
  completed
}

enum PAYMENT_STATUS {
  not_paid
  paid
  refunded
  refund_pending
  verification_pending
}

enum PAYMENT_METHOD {
  CASH
  CARD
  ONLINE
}

enum COURT_TYPE {
  indoor
  outdoor
  multipurpose
}

model User {
  id                   String    @id @default(uuid())
  user_id              Int       @unique @default(autoincrement())
  name                 String
  email                String    @unique
  email_verified       Boolean   @default(false)
  phone_verified       Boolean   @default(false)
  password_hash        String
  user_pfp_link        String    @default("https://www.shutterstock.com/default-avatar.png")
  user_phone           String    @unique
  secondary_user_phone String?
  roles                ROLE[]    @default([user])
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  bookings             Booking[]
  reviews              Review[]

  @@index([email])
  @@index([user_phone])
  @@index([user_id])
}

model Court {
  id                 String             @id @default(uuid())
  court_id           Int                @unique @default(autoincrement())
  name               String
  is_deleted         Boolean            @default(false)
  description        String?
  court_location     String
  hourly_rate        Int
  min_down_payment   Int
  court_type         COURT_TYPE
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  court_specs        Court_Specs[]
  court_availability Court_Availability[]
  court_media        Court_Media[]
  slots              Slot[]
  reviews            Review[]
  game_links         CourtGameLink[]
  close_dates        Court_Close_Dates[]
}

model Game {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  category    GAME_TYPE
  person      String?         @default("5v5")
  courts      CourtGameLink[]
}

model CourtGameLink {
  id       String    @id @default(uuid())
  court_id String
  game_id  String
  court    Court     @relation(fields: [court_id], references: [id])
  game     Game      @relation(fields: [game_id], references: [id])

  @@unique([court_id, game_id])
}

model Court_Specs {
  id       String @id @default(uuid())
  name     String
  court_id String
  value    String
  court    Court  @relation(fields: [court_id], references: [id])
}

model Court_Media {
  id         String     @id @default(uuid())
  court_id   String
  media_link String
  media_type MEDIA_TYPE
  court      Court      @relation(fields: [court_id], references: [id])
}

model Court_Availability {
  id         String @id @default(uuid())
  court_id   String
  day        DAY
  start_time String
  end_time   String
  court      Court  @relation(fields: [court_id], references: [id])
}

model Court_Close_Dates {
  id         String @id @default(uuid())
  court_id   String
  start_time String
  end_time   String
  court      Court  @relation(fields: [court_id], references: [id])
}

model Slot {
  id         String   @id @default(uuid())
  court_id   String
  start_time String
  end_time   String
  court      Court    @relation(fields: [court_id], references: [id])
  booking    Booking?

  @@unique([court_id, start_time, end_time])
  @@index([start_time])
  @@index([end_time])
}

model Booking {
  id           String         @id @default(uuid())
  booking_id   Int            @default(autoincrement())
  user_id      String
  slot_id      String?        @unique
  status       BOOKING_STATUS @default(pending)
  total_amount Int
  paid_amount  Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  user         User           @relation(fields: [user_id], references: [id])
  slot         Slot?          @relation(fields: [slot_id], references: [id])
  payment      Payment[]
}

model Payment {
  id                 String         @id @default(uuid())
  payment_id         Int            @default(autoincrement())
  booking_id         String
  payment_status     PAYMENT_STATUS @default(not_paid)
  payment_amount     Int
  payment_method     PAYMENT_METHOD @default(ONLINE)
  payment_time       DateTime       @default(now())
  payment_image_link String
  booking            Booking        @relation(fields: [booking_id], references: [id])
}

model Review {
  id          String        @id @default(uuid())
  user_id     String
  court_id    String
  rating      Int
  review_text String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  published   REVIEW_STATUS @default(pending)
  user        User          @relation(fields: [user_id], references: [id])
  court       Court         @relation(fields: [court_id], references: [id])

  @@unique([user_id, court_id])
}