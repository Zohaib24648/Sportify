// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  admin
  moderator
  user
  ground_owner
}

enum DAY {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum REVIEW_STATUS {
  pending
  approved
  rejected
}

enum BOOKING_STATUS {
  pending
  confirmed
  cancelled
  on_hold
  completed
}

enum PAYMENT_STATUS {
  not_paid
  paid
  refunded
  refund_pending
  verification_pending
}

enum PAYMENT_METHOD {
  CASH
  CARD
  ONLINE
}

model User {
  id            String    @id @default(uuid())
  user_id       Int       @default(autoincrement())
  name          String
  email         String    @unique
  password_hash String
  user_pfp_link String    @default("https://www.shutterstock.com/shutterstock/photos/1677509740/display_1500/stock-vector-default-avatar-profile-icon-social-media-user-vector-1677509740.jpg")
  user_phone    String    @unique
  role          ROLE      @default(user)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  bookings      Booking[]
  reviews       Review[]

  @@index([email])
  @@index([user_phone])
}

model Court {
  id                 String               @id @default(uuid())
  court_id           Int                  @default(autoincrement())
  name               String
  description        String?
  court_location     String
  hourly_rate        Int
  min_down_payment   Int
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  court_specs        Court_Specs[]
  court_availability Court_Availability[]
  court_media        Court_Media[]
  slots              Slot[]
  reviews            Review[]
  game_types         Court_Game_Type[]
  close_dates        Court_Close_Dates[]
}

//implement Media uploading
model Game_Type {
  id     String            @id @default(uuid())
  name   String            @unique
  courts Court_Game_Type[]
}

model Court_Game_Type {
  id           String    @id @default(uuid())
  court_id     String
  game_type_id String
  court        Court     @relation(fields: [court_id], references: [id])
  game_type    Game_Type @relation(fields: [game_type_id], references: [id])

  @@unique([court_id, game_type_id])
}

model Court_Specs {
  id       String @id @default(uuid())
  name     String
  court_id String
  value    String
  court    Court  @relation(fields: [court_id], references: [id])
}

model Court_Media {
  id         String @id @default(uuid())
  court_id   String
  media_link String
  court      Court  @relation(fields: [court_id], references: [id])
}

model Court_Availability {
  id         String @id @default(uuid())
  court_id   String
  day        DAY
  start_time String
  end_time   String
  court      Court  @relation(fields: [court_id], references: [id])
}

model Court_Close_Dates {
  id         String @id @default(uuid())
  court_id   String
  start_time String
  end_time   String

  court Court @relation(fields: [court_id], references: [id])
}

model Slot {
  id         String   @id @default(uuid())
  court_id   String
  start_time String
  end_time   String
  court      Court    @relation(fields: [court_id], references: [id])
  booking    Booking?

  @@unique([court_id, start_time, end_time])
  @@index([start_time])
  @@index([end_time])
}

model Booking {
  id           String         @id @default(uuid())
  booking_id   Int            @default(autoincrement())
  user_id      String
  slot_id      String?        @unique
  status       BOOKING_STATUS @default(pending)
  total_amount Int
  paid_amount  Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  user         User           @relation(fields: [user_id], references: [id])
  slot         Slot?          @relation(fields: [slot_id], references: [id])
  payment      Payment[]
}

model Payment {
  id                 String         @id @default(uuid())
  payment_id         Int            @default(autoincrement())
  booking_id         String
  payment_status     PAYMENT_STATUS @default(not_paid)
  payment_amount     Int
  payment_method     PAYMENT_METHOD @default(ONLINE)
  payment_time       DateTime       @default(now())
  payment_image_link String
  booking            Booking        @relation(fields: [booking_id], references: [id])
}

model Review {
  id          String        @id @default(uuid())
  user_id     String
  court_id    String
  rating      Int
  review_text String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  published   REVIEW_STATUS @default(pending)
  user        User          @relation(fields: [user_id], references: [id])
  court       Court         @relation(fields: [court_id], references: [id])

  @@unique([user_id, court_id])
}
